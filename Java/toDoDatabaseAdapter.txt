
package com.example.g.assignment1;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import android.database.SQLException;




public class toDoDatabaseAdapter {


    private static final String TAG = "ToDoDatabaseAdapter";
    public static final String KEY_ROWID = "_id";
    public static final int COL_ROWID = 0;

    public static final String KEY_TASKNAME = "taskName";
    public static final String KEY_LOCATION = "location";
    public static final String KEY_STATUS = "status";

    public static final int COL_TASKNAME = 1;
    public static final int COL_LOCATION = 2;
    public static final int COL_STATUS = 3;



    public static final String[] ALL_KEYS = new String[] {KEY_ROWID, KEY_TASKNAME, KEY_LOCATION, KEY_STATUS};

    public static final String DATABASE_NAME = "ToDoTasks";
    public static final String DATABASE_TABLE = "tasks";
    public static final int DATABASE_VERSION = 2;

    public static final String DATABASE_CREATE_SQL =
            "create table " + DATABASE_TABLE
                    + " (" + KEY_ROWID + " integer PRIMARY KEY AUTOINCREMENT, "

                    + KEY_TASKNAME + " string, "
                    + KEY_LOCATION + " string, "
                    + KEY_STATUS + " string "
                    + ");";

    public final Context context;

    public DatabaseHelper myDBHelper;
    public SQLiteDatabase db2;

    public toDoDatabaseAdapter(Context ctx) {
        this.context = ctx;
        myDBHelper = new DatabaseHelper(context);
    }

    public toDoDatabaseAdapter open() {
        db2 = myDBHelper.getWritableDatabase();
        return this;
    }

    public toDoDatabaseAdapter read()
    {
        db2 = myDBHelper.getReadableDatabase();
        return this;
    }

    public void close() {
        myDBHelper.close();
    }

    public long insertRow(String taskName, String location, String status) {

        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_TASKNAME, taskName);
        initialValues.put(KEY_LOCATION, location);
        initialValues.put(KEY_STATUS, status);

        return db2.insert(DATABASE_TABLE, null, initialValues);
    }

    public boolean deleteRow(long rowId) {
        String where = KEY_ROWID + "=" + rowId;
        return db2.delete(DATABASE_TABLE, where, null) != 0;
    }

    public void deleteAll() {
        Cursor c = getAllRows();
        long rowId = c.getColumnIndexOrThrow(KEY_ROWID);
        if (c.moveToFirst()) {
            do {
                deleteRow(c.getLong((int) rowId));
            } while (c.moveToNext());
        }
        c.close();
    }

    public Cursor getAllRows() {
        Cursor c = 	db2.query(true, DATABASE_TABLE, ALL_KEYS,
                null, null, null, null, null, null);
        if (c != null) {
            c.moveToFirst();
        }
        return c;
    }

    public Cursor getRow(long rowId) {
        String where = KEY_ROWID + "=" + rowId;
        Cursor c = 	db2.query(true, DATABASE_TABLE, ALL_KEYS,
                where, null, null, null, null, null);
        if (c != null) {
            c.moveToFirst();
        }
        return c;
    }

    public boolean updateRow(long rowId, String taskName, String location, String status) {
        String where = KEY_ROWID + "=" + rowId;

        ContentValues newValues = new ContentValues();
        newValues.put(KEY_TASKNAME, taskName);
        newValues.put(KEY_LOCATION, location);
        newValues.put(KEY_STATUS, status);

        return db2.update(DATABASE_TABLE, newValues, where, null) != 0;
    }

    private static class DatabaseHelper extends SQLiteOpenHelper
    {

        DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase _db)
        {
            _db.execSQL(DATABASE_CREATE_SQL);
        }

        @Override
        public void onUpgrade(SQLiteDatabase _db, int oldVersion, int newVersion) {
            Log.w(TAG, "Upgrading application's database from version " + oldVersion
                    + " to " + newVersion + ", which will destroy all old data!");

            _db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);

            onCreate(_db);
        }
    }
}
