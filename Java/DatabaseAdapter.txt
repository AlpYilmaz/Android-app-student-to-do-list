
package com.example.g.assignment1;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import android.database.SQLException;




public class DatabaseAdapter {


    private static final String TAG = "DatabaseAdapter";
    public static final String KEY_ROWID = "_id";
    public static final int COL_ROWID = 0;

    public static final String KEY_STUDENTID = "studentId";
    public static final String KEY_AGE = "age";
    public static final String KEY_COURSE = "course";
    public static final String KEY_ADDRESS = "address";
    public static final String KEY_GENDER = "gender";
    public static final String KEY_FIRSTNAME = "firstName";
    public static final String KEY_LASTNAME = "lastName";

    public static final int COL_STUDENTID = 1;
    public static final int COL_AGE = 2;
    public static final int COL_COURSE = 3;
    public static final int COL_ADDRESS = 4;
    public static final int COL_GENDER = 5;
    public static final int COL_FIRSTNAME = 6;
    public static final int COL_LASTNAME = 7;


    public static final String[] ALL_KEYS = new String[] {KEY_ROWID, KEY_STUDENTID, KEY_AGE, KEY_COURSE, KEY_ADDRESS, KEY_GENDER, KEY_FIRSTNAME, KEY_LASTNAME};

    public static final String DATABASE_NAME = "StudentRecords";
    public static final String DATABASE_TABLE = "students";

    public static final int DATABASE_VERSION = 2;

    public static final String DATABASE_CREATE_SQL =
            "create table " + DATABASE_TABLE
                    + " (" + KEY_ROWID + " integer PRIMARY KEY AUTOINCREMENT, "

                    + KEY_STUDENTID + " integer, "
                    + KEY_AGE + " integer, "
                    + KEY_COURSE + " string, "
                    + KEY_ADDRESS + " text, "
                    + KEY_GENDER + " string, "
                    + KEY_FIRSTNAME + " string, "
                    + KEY_LASTNAME + " string"
                    + ");";

    public final Context context;

    public DatabaseHelper myDBHelper;
    public SQLiteDatabase db;

    public DatabaseAdapter(Context ctx) {
        this.context = ctx;
        myDBHelper = new DatabaseHelper(context);
    }

    public DatabaseAdapter open() {
        db = myDBHelper.getWritableDatabase();
        return this;
    }

    public DatabaseAdapter read()
    {
        db = myDBHelper.getReadableDatabase();
        return this;
    }

    public void close() {
        myDBHelper.close();
    }

    public long insertRow(int studentId, int age, String course, String address, String gender, String firstName, String lastName) {

        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_STUDENTID, studentId);
        initialValues.put(KEY_AGE, age);
        initialValues.put(KEY_COURSE, course);
        initialValues.put(KEY_ADDRESS, address);
        initialValues.put(KEY_GENDER, gender);
        initialValues.put(KEY_FIRSTNAME, firstName);
        initialValues.put(KEY_LASTNAME, lastName);

        return db.insert(DATABASE_TABLE, null, initialValues);
    }

    public boolean deleteRow(long rowId) {
        String where = KEY_ROWID + "=" + rowId;
        return db.delete(DATABASE_TABLE, where, null) != 0;
    }

    public void deleteAll() {
        Cursor c = getAllRows();
        long rowId = c.getColumnIndexOrThrow(KEY_ROWID);
        if (c.moveToFirst()) {
            do {
                deleteRow(c.getLong((int) rowId));
            } while (c.moveToNext());
        }
        c.close();
    }

    public Cursor getAllRows() {
        Cursor c = 	db.query(true, DATABASE_TABLE, ALL_KEYS,
                null, null, null, null, null, null);
        if (c != null) {
            c.moveToFirst();
        }
        return c;
    }

    public Cursor getRow(long rowId) {
        String where = KEY_ROWID + "=" + rowId;
        Cursor c = 	db.query(true, DATABASE_TABLE, ALL_KEYS,
                where, null, null, null, null, null);
        if (c != null) {
            c.moveToFirst();
        }
        return c;
    }

    public boolean updateRow(long rowId, int studentId, int age, String course, String address, String gender, String firstName, String lastName) {
        String where = KEY_ROWID + "=" + rowId;

        ContentValues newValues = new ContentValues();
        newValues.put(KEY_STUDENTID, studentId);
        newValues.put(KEY_AGE, age);
        newValues.put(KEY_COURSE, course);
        newValues.put(KEY_ADDRESS, address);
        newValues.put(KEY_GENDER, gender);
        newValues.put(KEY_FIRSTNAME, firstName);
        newValues.put(KEY_LASTNAME, lastName);

        return db.update(DATABASE_TABLE, newValues, where, null) != 0;
    }

    private static class DatabaseHelper extends SQLiteOpenHelper
    {

        DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase _db)
        {
            _db.execSQL(DATABASE_CREATE_SQL);
        }

        @Override
        public void onUpgrade(SQLiteDatabase _db, int oldVersion, int newVersion) {
            Log.w(TAG, "Upgrading application's database from version " + oldVersion
                    + " to " + newVersion + ", which will destroy all old data!");

            _db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE);

            onCreate(_db);
        }
    }
}
